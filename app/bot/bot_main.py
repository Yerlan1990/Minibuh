import os
import httpx
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.session.aiohttp import AiohttpSession

from ..config import BOT_TOKEN, BASE_URL
from .keyboards import main_menu, google_auth_kb, back_home_cancel

router = Router(name="minibuh")

class RegStates(StatesGroup):
    waiting_id = State()
    waiting_phone = State()

class ContractStates(StatesGroup):
    company = State()
    counterparty = State()
    service = State()
    vat = State()
    amount = State()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏–Ω–∏ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é!", reply_markup=main_menu())

@router.message(F.text == "üè† –î–æ–º–æ–π")
async def home(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@router.message(F.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu())

@router.message(F.text == "üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_gate(message: Message, state: FSMContext):
    tg_id = str(message.from_user.id)
    async with httpx.AsyncClient(base_url=BASE_URL, timeout=30.0) as c:
        r = await c.post("/profile/register", data={"telegram_id": tg_id, "fio": message.from_user.full_name})
        status = r.json().get("status", "pending")
    if status != "active":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —à–∞–≥ 1 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ PDF —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.", reply_markup=back_home_cancel())
        await state.set_state(RegStates.waiting_id)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", reply_markup=main_menu())

@router.message(RegStates.waiting_id, F.document)
async def handle_id_doc(message: Message, state: FSMContext):
    if not message.document.file_name.lower().endswith(".pdf"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ PDF.")
        return
    file_info = await message.bot.get_file(message.document.file_id)
    file_bytes = await message.bot.download_file(file_info.file_path)
    import tempfile
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    tmp.write(file_bytes.read()); tmp.close()

    async with httpx.AsyncClient(base_url=BASE_URL, timeout=60.0) as c:
        with open(tmp.name, "rb") as f:
            r = await c.post("/ocr/id", files={"file": ("id.pdf", f, "application/pdf")})
    if r.status_code >= 400:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await message.answer("–®–∞–≥ 2 ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ë–ï–ó +7 –∏ –ë–ï–ó 8, —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä 701XXXXXXX).")
    await state.set_state(RegStates.waiting_phone)

@router.message(RegStates.waiting_phone, F.text.regexp(r"^\d{10}$"))
async def handle_phone(message: Message, state: FSMContext):
    phone = message.text
    tg_id = str(message.from_user.id)
    async with httpx.AsyncClient(base_url=BASE_URL, timeout=30.0) as c:
        await c.post("/profile/register", data={"telegram_id": tg_id, "phone": phone})
        await c.post("/profile/moderate", params={"telegram_id": tg_id, "approve": True})
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Drive:", reply_markup=google_auth_kb(BASE_URL, tg_id))

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
async def create_contract_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–î –∫–æ–º–ø–∞–Ω–∏–∏-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∏–ª–∏ 0 ‚Äî –µ—Å–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).", reply_markup=back_home_cancel())
    await state.set_state(ContractStates.company)

@router.message(ContractStates.company, F.text.regexp(r"^\d+$"))
async def step_company(message: Message, state: FSMContext):
    await state.update_data(company_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–î –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.")
    await state.set_state(ContractStates.counterparty)

@router.message(ContractStates.counterparty, F.text.regexp(r"^\d+$"))
async def step_counterparty(message: Message, state: FSMContext):
    await state.update_data(counterparty_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.")
    await state.set_state(ContractStates.service)

@router.message(ContractStates.service)
async def step_service(message: Message, state: FSMContext):
    await state.update_data(service_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –ù–î–° (–Ω–∞–ø—Ä–∏–º–µ—Ä 12).")
    await state.set_state(ContractStates.vat)

@router.message(ContractStates.vat, F.text.regexp(r"^\d+$"))
async def step_vat(message: Message, state: FSMContext):
    await state.update_data(vat_rate=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ç–∏—ã–Ω–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
    await state.set_state(ContractStates.amount)

@router.message(ContractStates.amount, F.text.regexp(r"^\d+$"))
async def step_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    data["amount"] = int(message.text)
    tg_id = str(message.from_user.id)
    async with httpx.AsyncClient(base_url=BASE_URL, timeout=60.0) as c:
        r = await c.post("/contracts", params={"telegram_id": tg_id}, json={
            "company_id": data["company_id"],
            "counterparty_id": data["counterparty_id"],
            "service_name": data["service_name"],
            "vat_rate": data["vat_rate"],
            "amount": data["amount"],
            "currency": "KZT",
            "advance_percent": 0,
            "reserve_number": True
        })
    if r.status_code >= 400:
        await message.answer(f"–û—à–∏–±–∫–∞: {r.text}")
    else:
        res = r.json()
        await message.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–≥–æ–≤–æ—Ä ‚Ññ {res.get('number')} —Å–æ–∑–¥–∞–Ω. –§–∞–π–ª: {res.get('file')}")
    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu())

session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
dp = Dispatcher()
dp.include_router(router)

import os
from aiogram import Bot
from aiohttp import ClientSession

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing or invalid. Set it in Railway ‚Üí Variables.")

session = ClientSession()
bot = Bot(token=BOT_TOKEN, session=session)

